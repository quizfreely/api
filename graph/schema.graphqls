type Query {
    authed: Boolean
    authedUser: AuthedUser
    studyset(id: ID!): Studyset
    user(id: ID!): User
    term(id: ID!): Term
    featuredStudysets(limit: Int, offset: Int): [Studyset]
    recentStudysets(limit: Int, offset: Int): [Studyset]
    searchStudysets(q: String!, limit: Int, offset: Int): [Studyset]
    myStudysets(limit: Int, offset: Int): [Studyset]
    myFolders(limit: Int, offset: Int): [Folder]
    mySavedStudysets(limit: Int, offset: Int): [Studyset]
    practiceTest(id: ID!): PracticeTest
    featuredCategories: [Category]
}
type Mutation {
    createStudyset(studyset: StudysetInput!, terms: [NewTermInput]): Studyset
    updateStudyset(id: ID!, studyset: StudysetInput, terms: [TermInput], newTerms: [NewTermInput], deleteTerms: [ID]): Studyset
    deleteStudyset(id: ID!): ID
    updateUser(displayName: String): AuthedUser
    updateTermProgress(termProgress: [TermProgressInput!]!): [TermProgress]
    recordConfusedTerms(confusedTerms: [TermConfusionPairInput]): Boolean
    recordPracticeTest(input: PracticeTestInput): PracticeTest
    updatePracticeTest(input: PracticeTestInput): PracticeTest
    createFolder(name: String!): Folder
    renameFolder(id: ID!, name: String!): Folder
    deleteFolder(id: ID!, unsaveAllStudysets: Boolean!): ID
    saveStudyset(studysetId: ID!, folderId: ID): Boolean
    unsaveStudyset(studysetId: ID!): Boolean
    createFeaturedCategory(title: String): Category
    setStudysetFeaturedCategory(studysetId: ID, categoryId: ID): Boolean
}
type User {
    id: ID
    username: String
    displayName: String
}
type AuthedUser {
    id: ID
    username: String
    displayName: String
    authType: AuthType
    oauthGoogleEmail: String
    modPerms: Boolean
}
enum AuthType {
    USERNAME_PASSWORD
    OAUTH_GOOGLE
}
type Studyset {
    id: ID
    title: String
    private: Boolean
    updatedAt: String
    user: User
    terms: [Term]
    termsCount: Int
    practiceTests: [PracticeTest]
}
type Term {
    id: ID
    term: String
    def: String
    sortOrder: Int
    progress: TermProgress
    progressHistory: [TermProgressHistory]
    topConfusionPairs: [TermConfusionPair]
    topReverseConfusionPairs: [TermConfusionPair]
    createdAt: String
    updatedAt: String
}
input StudysetInput {
    title: String!
    private: Boolean!
}
input NewTermInput {
    term: String
    def: String
    sortOrder: Int!
}
input TermInput {
    id: ID!
    term: String
    def: String
    sortOrder: Int
}
type TermProgress {
    id: ID
    termFirstReviewedAt: String
    termLastReviewedAt: String
    termReviewCount: Int
    defFirstReviewedAt: String
    defLastReviewedAt: String
    defReviewCount: Int
    termCorrectCount: Int
    termIncorrectCount: Int
    defCorrectCount: Int
    defIncorrectCount: Int
    termLeitnerSystemBox: Int
    defLeitnerSystemBox: Int
}
type TermProgressHistory {
    id: ID
    timestamp: String,
    termCorrectCount: Int
    termIncorrectCount: Int
    defCorrectCount: Int
    defIncorrectCount: Int
}
input TermProgressInput {
    termId: ID!
    termReviewedAt: String
    defReviewedAt: String
    termLeitnerSystemBox: Int
    defLeitnerSystemBox: Int
    termCorrectIncrease: Int
    termIncorrectIncrease: Int
    defCorrectIncrease: Int
    defIncorrectIncrease: Int
}
enum AnswerWith {
    TERM
    DEF
}
type TermConfusionPair {
    id: ID
    term: Term
    confusedTerm: Term
    answeredWith: AnswerWith
    confusedCount: Int
    lastConfusedAt: String
}
input TermConfusionPairInput {
    termId: ID
    confusedTermId: ID
    answeredWith: AnswerWith
    confusedCountIncrease: Int
    confusedAt: String
}
type PracticeTest {
    id: ID
    timestamp: String
    studysetId: ID
    questionsCorrect: Int
    questionsTotal: Int
    questions: [Question]
}
enum QuestionType {
    MCQ
    TRUE_FALSE
    MATCH
    FRQ
}
type Question {
    questionType: QuestionType
    mcq: MCQ
    trueFalseQuestion: TrueFalseQuestion
    matchQuestionInput: MatchQuestion
    frq: FRQ
}
type MCQ {
    term: Term
    answerWith: AnswerWith
    correct: Boolean
    answeredTerm: Term
    distractors: [Term]
    correctChoiceIndex: Int
}
type TrueFalseQuestion {
    term: Term
    answerWith: AnswerWith
    correct: Boolean
    answeredBool: Boolean
    distractor: Term
}
type MatchQuestion {
    term: Term
    answerWith: AnswerWith
    correct: Boolean
    answeredTerm: Term
    group: Int
}
type FRQ {
    term: Term
    answerWith: AnswerWith
    correct: Boolean
    userMarkedCorrect: Boolean
    answeredString: String
}
input PracticeTestInput {
    id: ID
    timestamp: String
    studysetId: ID
    questionsCorrect: Int
    questionsTotal: Int
    questions: [QuestionInput]
}
input QuestionInput {
    questionType: QuestionType
    mcq: MCQInput
    trueFalseQuestion: TrueFalseQuestionInput
    matchQuestion: MatchQuestionInput
    frq: FRQInput
}
input MCQInput {
    term: TermInput
    answerWith: AnswerWith
    correct: Boolean
    answeredTerm: TermInput
    distractors: [TermInput]
    correctChoiceIndex: Int
}
input TrueFalseQuestionInput {
    term: TermInput
    answerWith: AnswerWith
    correct: Boolean
    answeredBool: Boolean
    distractor: TermInput
}
input MatchQuestionInput {
    term: TermInput
    answerWith: AnswerWith
    correct: Boolean
    answeredTerm: TermInput
    group: Int
}
input FRQInput {
    term: TermInput
    answerWith: AnswerWith
    correct: Boolean
    userMarkedCorrect: Boolean
    answeredString: String
}
type Category {
    id: ID
    title: String
    studysets: [Studyset]
}
type Folder {
    id: ID
    name: String
    studysets: [Studyset]
}
