// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Query struct {
}

type Studyset struct {
	ID              *string       `json:"id,omitempty"`
	Title           *string       `json:"title,omitempty"`
	Private         *bool         `json:"private,omitempty"`
	UpdatedAt       *string       `json:"updated_at,omitempty"`
	UserID          *string       `json:"user_id,omitempty"`
	UserDisplayName *string       `json:"user_display_name,omitempty"`
	Data            *StudysetData `json:"data,omitempty"`
	TermsCount      *int32        `json:"terms_count,omitempty"`
}

type StudysetData struct {
	Terms [][]*string `json:"terms,omitempty"`
}

type StudysetDataInput struct {
	Terms [][]*string `json:"terms,omitempty"`
}

type StudysetInput struct {
	Title   string             `json:"title"`
	Private bool               `json:"private"`
	Data    *StudysetDataInput `json:"data"`
}

type User struct {
	ID          *string `json:"id,omitempty"`
	Username    *string `json:"username,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
}

type AuthType string

const (
	AuthTypeUsernamePassword AuthType = "USERNAME_PASSWORD"
	AuthTypeOauthGoogle      AuthType = "OAUTH_GOOGLE"
)

var AllAuthType = []AuthType{
	AuthTypeUsernamePassword,
	AuthTypeOauthGoogle,
}

func (e AuthType) IsValid() bool {
	switch e {
	case AuthTypeUsernamePassword, AuthTypeOauthGoogle:
		return true
	}
	return false
}

func (e AuthType) String() string {
	return string(e)
}

func (e *AuthType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}

func (e AuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AuthType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AuthType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
