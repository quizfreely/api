// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Category struct {
	Title     *string     `json:"title,omitempty"`
	Studysets []*Studyset `json:"studysets,omitempty"`
}

type Frq struct {
	Term              *Term       `json:"term,omitempty"`
	AnswerWith        *AnswerWith `json:"answerWith,omitempty"`
	Correct           *bool       `json:"correct,omitempty"`
	UserMarkedCorrect *bool       `json:"userMarkedCorrect,omitempty"`
	AnsweredString    *string     `json:"answeredString,omitempty"`
}

type FRQInput struct {
	Term              *TermInput  `json:"term,omitempty"`
	AnswerWith        *AnswerWith `json:"answerWith,omitempty"`
	Correct           *bool       `json:"correct,omitempty"`
	UserMarkedCorrect *bool       `json:"userMarkedCorrect,omitempty"`
	AnsweredString    *string     `json:"answeredString,omitempty"`
}

type Mcq struct {
	Term               *Term       `json:"term,omitempty"`
	AnswerWith         *AnswerWith `json:"answerWith,omitempty"`
	Correct            *bool       `json:"correct,omitempty"`
	AnsweredTerm       *Term       `json:"answeredTerm,omitempty"`
	Distractors        []*Term     `json:"distractors,omitempty"`
	CorrectChoiceIndex *int32      `json:"correctChoiceIndex,omitempty"`
}

type MCQInput struct {
	Term               *TermInput   `json:"term,omitempty"`
	AnswerWith         *AnswerWith  `json:"answerWith,omitempty"`
	Correct            *bool        `json:"correct,omitempty"`
	AnsweredTerm       *TermInput   `json:"answeredTerm,omitempty"`
	Distractors        []*TermInput `json:"distractors,omitempty"`
	CorrectChoiceIndex *int32       `json:"correctChoiceIndex,omitempty"`
}

type MatchQuestion struct {
	Term         *Term       `json:"term,omitempty"`
	AnswerWith   *AnswerWith `json:"answerWith,omitempty"`
	Correct      *bool       `json:"correct,omitempty"`
	AnsweredTerm *Term       `json:"answeredTerm,omitempty"`
	Group        *int32      `json:"group,omitempty"`
}

type MatchQuestionInput struct {
	Term         *TermInput  `json:"term,omitempty"`
	AnswerWith   *AnswerWith `json:"answerWith,omitempty"`
	Correct      *bool       `json:"correct,omitempty"`
	AnsweredTerm *TermInput  `json:"answeredTerm,omitempty"`
	Group        *int32      `json:"group,omitempty"`
}

type Mutation struct {
}

type NewTermInput struct {
	Term      *string `json:"term,omitempty"`
	Def       *string `json:"def,omitempty"`
	SortOrder int32   `json:"sortOrder"`
}

type PracticeTestInput struct {
	ID               *string          `json:"id,omitempty"`
	Timestamp        *string          `json:"timestamp,omitempty"`
	StudysetID       *string          `json:"studysetId,omitempty"`
	QuestionsCorrect *int32           `json:"questionsCorrect,omitempty"`
	QuestionsTotal   *int32           `json:"questionsTotal,omitempty"`
	Questions        []*QuestionInput `json:"questions,omitempty"`
}

type Query struct {
}

type Question struct {
	QuestionType       *QuestionType      `json:"questionType,omitempty"`
	Mcq                *Mcq               `json:"mcq,omitempty"`
	TrueFalseQuestion  *TrueFalseQuestion `json:"trueFalseQuestion,omitempty"`
	MatchQuestionInput *MatchQuestion     `json:"matchQuestionInput,omitempty"`
	Frq                *Frq               `json:"frq,omitempty"`
}

type QuestionInput struct {
	QuestionType      *QuestionType           `json:"questionType,omitempty"`
	Mcq               *MCQInput               `json:"mcq,omitempty"`
	TrueFalseQuestion *TrueFalseQuestionInput `json:"trueFalseQuestion,omitempty"`
	MatchQuestion     *MatchQuestionInput     `json:"matchQuestion,omitempty"`
	Frq               *FRQInput               `json:"frq,omitempty"`
}

type StudysetInput struct {
	Title   string `json:"title"`
	Private bool   `json:"private"`
}

type TermConfusionPairInput struct {
	TermID                *string     `json:"termId,omitempty"`
	ConfusedTermID        *string     `json:"confusedTermId,omitempty"`
	AnsweredWith          *AnswerWith `json:"answeredWith,omitempty"`
	ConfusedCountIncrease *int32      `json:"confusedCountIncrease,omitempty"`
	ConfusedAt            *string     `json:"confusedAt,omitempty"`
}

type TermInput struct {
	ID        string  `json:"id"`
	Term      *string `json:"term,omitempty"`
	Def       *string `json:"def,omitempty"`
	SortOrder *int32  `json:"sortOrder,omitempty"`
}

type TermProgress struct {
	ID                   *string `json:"id,omitempty"`
	TermFirstReviewedAt  *string `json:"termFirstReviewedAt,omitempty"`
	TermLastReviewedAt   *string `json:"termLastReviewedAt,omitempty"`
	TermReviewCount      *int32  `json:"termReviewCount,omitempty"`
	DefFirstReviewedAt   *string `json:"defFirstReviewedAt,omitempty"`
	DefLastReviewedAt    *string `json:"defLastReviewedAt,omitempty"`
	DefReviewCount       *int32  `json:"defReviewCount,omitempty"`
	TermCorrectCount     *int32  `json:"termCorrectCount,omitempty"`
	TermIncorrectCount   *int32  `json:"termIncorrectCount,omitempty"`
	DefCorrectCount      *int32  `json:"defCorrectCount,omitempty"`
	DefIncorrectCount    *int32  `json:"defIncorrectCount,omitempty"`
	TermLeitnerSystemBox *int32  `json:"termLeitnerSystemBox,omitempty"`
	DefLeitnerSystemBox  *int32  `json:"defLeitnerSystemBox,omitempty"`
}

type TermProgressInput struct {
	TermID                string  `json:"termId"`
	TermReviewedAt        *string `json:"termReviewedAt,omitempty"`
	DefReviewedAt         *string `json:"defReviewedAt,omitempty"`
	TermLeitnerSystemBox  *int32  `json:"termLeitnerSystemBox,omitempty"`
	DefLeitnerSystemBox   *int32  `json:"defLeitnerSystemBox,omitempty"`
	TermCorrectIncrease   *int32  `json:"termCorrectIncrease,omitempty"`
	TermIncorrectIncrease *int32  `json:"termIncorrectIncrease,omitempty"`
	DefCorrectIncrease    *int32  `json:"defCorrectIncrease,omitempty"`
	DefIncorrectIncrease  *int32  `json:"defIncorrectIncrease,omitempty"`
}

type TrueFalseQuestion struct {
	Term         *Term       `json:"term,omitempty"`
	AnswerWith   *AnswerWith `json:"answerWith,omitempty"`
	Correct      *bool       `json:"correct,omitempty"`
	AnsweredBool *bool       `json:"answeredBool,omitempty"`
	Distractor   *Term       `json:"distractor,omitempty"`
}

type TrueFalseQuestionInput struct {
	Term         *TermInput  `json:"term,omitempty"`
	AnswerWith   *AnswerWith `json:"answerWith,omitempty"`
	Correct      *bool       `json:"correct,omitempty"`
	AnsweredBool *bool       `json:"answeredBool,omitempty"`
	Distractor   *TermInput  `json:"distractor,omitempty"`
}

type User struct {
	ID          *string `json:"id,omitempty"`
	Username    *string `json:"username,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
}

type AnswerWith string

const (
	AnswerWithTerm AnswerWith = "TERM"
	AnswerWithDef  AnswerWith = "DEF"
)

var AllAnswerWith = []AnswerWith{
	AnswerWithTerm,
	AnswerWithDef,
}

func (e AnswerWith) IsValid() bool {
	switch e {
	case AnswerWithTerm, AnswerWithDef:
		return true
	}
	return false
}

func (e AnswerWith) String() string {
	return string(e)
}

func (e *AnswerWith) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AnswerWith(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AnswerWith", str)
	}
	return nil
}

func (e AnswerWith) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AnswerWith) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AnswerWith) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type AuthType string

const (
	AuthTypeUsernamePassword AuthType = "USERNAME_PASSWORD"
	AuthTypeOauthGoogle      AuthType = "OAUTH_GOOGLE"
)

var AllAuthType = []AuthType{
	AuthTypeUsernamePassword,
	AuthTypeOauthGoogle,
}

func (e AuthType) IsValid() bool {
	switch e {
	case AuthTypeUsernamePassword, AuthTypeOauthGoogle:
		return true
	}
	return false
}

func (e AuthType) String() string {
	return string(e)
}

func (e *AuthType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthType", str)
	}
	return nil
}

func (e AuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AuthType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AuthType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type QuestionType string

const (
	QuestionTypeMcq       QuestionType = "MCQ"
	QuestionTypeTrueFalse QuestionType = "TRUE_FALSE"
	QuestionTypeMatch     QuestionType = "MATCH"
	QuestionTypeFrq       QuestionType = "FRQ"
)

var AllQuestionType = []QuestionType{
	QuestionTypeMcq,
	QuestionTypeTrueFalse,
	QuestionTypeMatch,
	QuestionTypeFrq,
}

func (e QuestionType) IsValid() bool {
	switch e {
	case QuestionTypeMcq, QuestionTypeTrueFalse, QuestionTypeMatch, QuestionTypeFrq:
		return true
	}
	return false
}

func (e QuestionType) String() string {
	return string(e)
}

func (e *QuestionType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuestionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuestionType", str)
	}
	return nil
}

func (e QuestionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *QuestionType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e QuestionType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
